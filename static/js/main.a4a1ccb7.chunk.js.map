{"version":3,"sources":["component/LoginPage.js","component/UserData.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","props","state","userdata","userlogin","email","password","err","this","dispatch","type","loginData","event","user","document","getElementById","value","console","log","username","pwd","history","push","setState","style","marginTop","onSubmit","e","preventDefault","TextField","id","label","variant","placeholder","width","Button","onClick","LoginUser","color","fontSize","Component","connect","UserData","LogOutUser","data","loginDatauser","tableStyle","marginBottom","display","justifyContent","cellPadding","cellSpacing","map","item","index","key","tr","name","age","gender","phoneNo","App","className","exact","path","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a1ccb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userdata: '',\n            userlogin: '',\n            email: '',\n            password: '',\n            err: ''\n        }\n        //   this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount() {\n        this.props.dispatch({ type: \"USERLOGIN\", userlogin: loginData });\n    }\n    LoginUser(event) {\n       // event.preventDefault();\n        //alert('lkadsa1')\n        // const { email, password } = this.state;\n        let user = document.getElementById('email').value;\n        console.log(user, 'user', loginData[0].username)\n        let pwd = document.getElementById('pwd').value;\n        if (user != '' || pwd != '') {\n            if (user == loginData[0].username && user != null) {\n                if (pwd == loginData[0].password) {\n                    this.props.history.push(\"/UserData\");\n                }\n                else {\n                    this.setState({\n                        err: 'Invalid Password'\n                    })\n                }\n\n            }\n            else {\n                this.setState({\n                    err: 'Invalid Username'\n                })\n            }\n        }\n        else {\n            this.setState({\n                err: 'Invalid Username and Password '\n            })\n        }\n\n\n\n    }\n    render() {\n        return (\n            <div style={{ marginTop: 150, }}>\n                <form onSubmit={e => (e.preventDefault())}>\n                    <div>\n                        <TextField type='email' id='email' label=\"email\" variant=\"outlined\" placeholder='Enter email' style={{ width: 250 }} />\n                    </div>\n                    <div style={{ marginTop: 20 }}>\n                        <TextField type='password' id='pwd' label=\"password\" variant=\"outlined\" placeholder='Enter Password' style={{ width: 250 }} />\n                    </div>\n                    <div>\n                        <Button onClick={() => this.LoginUser()} type='submit' variant=\"contained\" color=\"primary\" style={{ width: 250, marginTop: 20 }}> Login </Button>\n\n                    </div>\n                    <text style={{color : 'red',fontSize : 12}}>{this.state.err}</text>\n                </form>\n            </div>\n        )\n    }\n}\nconst loginData = [\n    {\n        username: \"hruday@gmail.com\",\n        password: 'hruday123'\n    }\n\n]\n\nconst mapStateToProps = state => {\n    return {\n        // userdata: state.userdata,\n        // userlogin: state.userlogin,\n\n    }\n}\n\nexport default connect(mapStateToProps)(LoginPage);","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { flexbox } from '@material-ui/system';\n\nclass UserData extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userdata: '',\n            userlogin: '',\n            email: '',\n            password: '',\n            data: []\n        }\n    }\n    componentDidMount() {\n        this.props.dispatch({ type: \"USERDATA\", userlogin: loginDatauser[0].user });\n        this.setState({\n            data: loginDatauser[0].user\n        })\n\n    }\n    LogOutUser = () => {\n        //  this.props.history.goBack();\n        this.props.history.push(\"\");\n    }\n    render() {\n        var tableStyle = {\n            \"border\": \"1px solid #ddd\",\n            \"border-collapse\": \"collapse\",\n            \"tr\":{\n                \"borderTop\": \"1px solid #ddd\",\n            }\n        };\n        return (\n            <div>\n                <Button onClick={() => this.LogOutUser()} variant=\"contained\" color=\"primary\" style={{ marginTop: 20, marginBottom: 20, }}> Logout </Button>\n\n\n                <div style={{ display: 'flex', justifyContent: 'center', }}>\n\n                    <div>\n                        <table cellPadding='8' cellSpacing='0' style={tableStyle} >\n                            <thead>\n                                <tr>\n                                    <td >S.No</td>\n                                    <td> Name </td>\n                                    <td>Age</td>\n                                    <td>Gender</td>\n                                    <td>Email</td>\n                                    <td>Phone No</td>\n                                </tr>\n                            </thead>\n                            <tbody >\n                                {\n                                    this.state.data.map((item, index) =>\n\n                                        <tr key={index} style={tableStyle.tr} >\n                                            <td>{item.id}</td>\n                                            <td>{item.name}</td>\n                                            <td>{item.age}</td>\n                                            <td>{item.gender}</td>\n                                            <td>{item.email}</td>\n                                            <td>{item.phoneNo}</td>\n                                        </tr>\n\n                                    )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div >\n            </div>\n        )\n    }\n}\n\n\nconst loginDatauser = [\n    {\n        user: [{\n            \"id\": 1,\n            \"name\": \"test1\",\n            \"age\": \"11\",\n            \"gender\": \"male\",\n            \"email\": \"test1@gmail.com\",\n            \"phoneNo\": \"9415346313\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"test2\",\n            \"age\": \"12\",\n            \"gender\": \"male\",\n            \"email\": \"test2@gmail.com\",\n            \"phoneNo\": \"9415346314\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"test3\",\n\n            \"age\": \"13\",\n            \"gender\": \"male\",\n            \"email\": \"test3@gmail.com\",\n            \"phoneNo\": \"9415346315\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"test4\",\n            \"age\": \"14\",\n            \"gender\": \"male\",\n            \"email\": \"test4@gmail.com\",\n            \"phoneNo\": \"9415346316\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"test5\",\n            \"age\": \"15\",\n            \"gender\": \"male\",\n            \"email\": \"test5@gmail.com\",\n            \"phoneNo\": \"9415346317\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"test6\",\n            \"age\": \"16\",\n            \"gender\": \"male\",\n            \"email\": \"test6@gmail.com\",\n            \"phoneNo\": \"9415346318\"\n        }\n        ]\n    }\n]\nconst mapStateToProps = state => {\n    return {\n        // userdata: state.userdata,\n        // userlogin: state.userlogin,\n\n    }\n}\nexport default connect(mapStateToProps)(UserData);\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport LoginPage from './component/LoginPage';\nimport UserData from './component/UserData';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n\n    <Router>\n      <div className=\"App\">\n        <Route exact  path=\"/\" component={LoginPage} /> {/* app = home */}\n        <Route  path=\"/UserData\" component={UserData} />\n      </div>\n\n     \n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n\nconst initialState = {\n    userdata: '',\n    userlogin: '',\n\n};\n\nfunction reducer(state = initialState, action) {\n    console.log('reducer', action);\n    switch (action.type) {\n        case 'USERLOGIN':\n            return {\n                userlogin: action.userlogin,\n                userdata: state.userdata\n            }\n        case 'USERDATA':\n            return {\n                userdata: action.userdata,\n                userlogin: state.userlogin,\n\n            }\n    }\n}\nconst store = createStore(reducer);\nconst App2 = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<App2 />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}